name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC to catch dependency issues
    - cron: '0 2 * * *'

jobs:
  lint-and-format:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f test-requirements.txt ]; then pip install -r test-requirements.txt; fi

    - name: Check code formatting with Black
      run: black --check --diff PLATFORM/ TOOLS/ TESTING/

    - name: Check imports with isort
      run: isort --check-only --diff PLATFORM/ TOOLS/ TESTING/

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 PLATFORM/ TOOLS/ TESTING/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 PLATFORM/ TOOLS/ TESTING/ --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics

    - name: Type checking with mypy
      run: mypy PLATFORM/ --ignore-missing-imports
      continue-on-error: true  # Type checking is advisory for now

  unit-tests:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y zeek yara suricata

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install zeek yara suricata

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        # Windows setup for dependencies
        echo "Setting up Windows dependencies"
        # TODO: Add Windows-specific dependency installation

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-xdist
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f test-requirements.txt ]; then pip install -r test-requirements.txt; fi

    - name: Create necessary directories
      run: |
        mkdir -p DATA/runtime/logs
        mkdir -p DATA/runtime/extracted-files
        mkdir -p DATA/runtime/alerts

    - name: Run unit tests
      run: |
        python -m pytest TESTING/unit/ -v --cov=PLATFORM --cov-report=xml --cov-report=html
      env:
        PYTHONPATH: ${{ github.workspace }}/PLATFORM

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y zeek yara suricata

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-xdist
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f test-requirements.txt ]; then pip install -r test-requirements.txt; fi

    - name: Set up test environment
      run: |
        mkdir -p DATA/runtime/logs
        mkdir -p DATA/runtime/extracted-files
        mkdir -p DATA/runtime/alerts
        mkdir -p DATA/samples/benign
        
        # Create test configuration
        cp CONFIGURATION/defaults/default_config.json CONFIGURATION/defaults/test_config.json

    - name: Run integration tests
      run: |
        python -m pytest TESTING/integration/ -v --tb=short
      env:
        PYTHONPATH: ${{ github.workspace }}/PLATFORM

  educational-content-tests:
    name: Educational Content Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest requests markdown
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Validate tutorial content
      run: |
        python -m pytest TESTING/educational/ -v
      env:
        PYTHONPATH: ${{ github.workspace }}/PLATFORM

    - name: Check external links
      run: |
        # Find all markdown files and check external links
        find EDUCATION/ -name "*.md" -exec grep -H "http" {} \; | head -20
        echo "Link checking completed (basic validation)"

    - name: Validate code examples
      run: |
        # Extract and validate code examples from tutorials
        python TOOLS/dev-tools/documentation/validate_examples.py
      continue-on-error: true  # Educational content validation is advisory

  cli-tool-tests:
    name: CLI Tool Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install click pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Test CLI tool installation
      run: |
        chmod +x TOOLS/cli/zyi
        ./TOOLS/cli/zyi --help

    - name: Test CLI commands
      run: |
        ./TOOLS/cli/zyi info
        ./TOOLS/cli/zyi status
        ./TOOLS/cli/zyi demo run --list

    - name: Test CLI demo functionality
      run: |
        ./TOOLS/cli/zyi demo run --tutorial basic-detection

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run Bandit security scan
      run: |
        bandit -r PLATFORM/ -f json -o bandit-report.json
        bandit -r PLATFORM/ -f txt
      continue-on-error: true

    - name: Check dependencies for known vulnerabilities
      run: |
        safety check --json --output safety-report.json
        safety check
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      run: |
        if [ -f DEPLOYMENT/docker/Dockerfile ]; then
          docker build -f DEPLOYMENT/docker/Dockerfile -t zyi:test .
        else
          echo "Dockerfile not found, skipping Docker build"
        fi
      continue-on-error: true

  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-benchmark
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run performance benchmarks
      run: |
        python -m pytest TESTING/performance/ -v --benchmark-only --benchmark-json=benchmark.json
      env:
        PYTHONPATH: ${{ github.workspace }}/PLATFORM

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.json

  documentation-build:
    name: Documentation Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install documentation tools
      run: |
        python -m pip install --upgrade pip
        pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin

    - name: Check documentation structure
      run: |
        # Verify all main README files exist
        test -f README.md
        test -f EDUCATION/README.md
        test -f CONTRIBUTING.md
        test -f PROJECT_PLAN.md

    - name: Build documentation (if mkdocs.yml exists)
      run: |
        if [ -f mkdocs.yml ]; then
          mkdocs build --strict
        else
          echo "No mkdocs.yml found, skipping documentation build"
        fi
      continue-on-error: true

  notification:
    name: Notification
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests, integration-tests, educational-content-tests, cli-tool-tests, security-scan]
    if: always()
    
    steps:
    - name: Report results
      run: |
        echo "CI Pipeline completed"
        echo "Lint and Format: ${{ needs.lint-and-format.result }}"
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        echo "Educational Content: ${{ needs.educational-content-tests.result }}"
        echo "CLI Tool Tests: ${{ needs.cli-tool-tests.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"